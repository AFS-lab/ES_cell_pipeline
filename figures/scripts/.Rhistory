batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv", header=FALSE)
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Filters applied based on Supplementary Figure 10
filter_ES<-QC_raw[QC_raw$NonUnique<2500000 & QC_raw$NumReads<12000000 & QC_raw$NumReads>3500000 & QC_raw$NumAlignments>4000000 & QC_raw$NumAlignments< 32000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
filter_ES<-filter_ES[filter_ES$Filename!='ERR522956',]
rm(list=setdiff(ls(), c("filter_ES")))
#######################################
single_cell<-read.table("data/clean_ground_truth_counts.txt")
#filter_ES relevant cells
single_cell<-single_cell[,colnames(single_cell) %in% filter_ES$Filename]
ids<-names(single_cell)
batch<-rep("batch", ncol(single_cell))
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
save(teich_scater_QC, file="../figures/data/SupplementaryFigure11_scater_object.RData")
#Read in QC statistics files
QC_Sim<-read.csv("data/simulated/read_alignment_qc.csv")
QC_Sim<-QC_Sim[QC_Sim$Filename %in% filter_ES$Filename,]
names(QC_Sim)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater)
###############################################################################
# CREATE FILTERS BASED ON QC STATS
#QC script
library(ggplot2)
library(ggpubr)
library(reshape2)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
single_cell<-single_cell[,colnames(single_cell)!='ERR522956', drop=FALSE]
rep_1<-read.table("data/filenames_2i_2.txt")
rep_2<-read.table("data/filenames_2i_3.txt")
rep_3<-read.table("data/filenames_2i_4.txt")
rep_4<-read.table("data/filenames_2i_5.txt")
#Function that formats batch data
make_batch<-function(counts_data){
batch<-vector()
batch_1<-colnames(counts_data) %in% rep_1$V1
batch_2<-colnames(counts_data) %in% rep_2$V1
batch_3<-colnames(counts_data) %in% rep_3$V1
batch_4<-colnames(counts_data) %in% rep_4$V1
for (i in 1:length(colnames(counts_data))){
if (batch_1[i]==TRUE){
batch[i]<-'2i_2'
}else if (batch_2[i]==TRUE){
batch[i]<-'2i_3'
}
else if (batch_3[i]==TRUE){
batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv", header=FALSE)
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Filters applied based on Supplementary Figure 10
filter_ES<-QC_raw[QC_raw$NonUnique<2500000 & QC_raw$NumReads<12000000 & QC_raw$NumReads>3500000 & QC_raw$NumAlignments>4000000 & QC_raw$NumAlignments< 32000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
filter_ES<-filter_ES[filter_ES$Filename!='ERR522956',]
rm(list=setdiff(ls(), c("filter_ES")))
#######################################
single_cell<-read.table("data/clean_ground_truth_counts.txt")
#filter_ES relevant cells
single_cell<-single_cell[,colnames(single_cell) %in% filter_ES$Filename]
ids<-names(single_cell)
batch<-rep("batch", ncol(single_cell))
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
save(teich_scater_QC, file="../figures/data/SupplementaryFigure11_scater_object.RData")
#Read in QC statistics files
QC_Sim<-read.csv("data/simulated/read_alignment_qc.csv")
names(QC_Sim)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Keep only filtered cells
QC_Sim<-QC_Sim[QC_Sim$Filename %in% filter_ES$Filename,]
write.table(QC_Sim, "../figures/data/SupplementaryFigure11_reads_alignment_data.txt")
setwd("../figures/scripts/")
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(reshape2)
#######################################################################
# FUNCTIONS
#function removes trailing strings from tool names
remove_trail<-function(ggplot_results){
ggplot_results$Tool<-sub("_cor", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_F1", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_nmrse", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_precision", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_recall", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_align", "Salmon\nAlign", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_quasi", "Salmon\nQuasi", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_SMEM", "Salmon\nSMEM", ggplot_results$Tool)
return(ggplot_results)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#function to create ggplot object
make_ggplot<-function(df, title, ylabel){
p<-ggplot(data=df, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity") + facet_grid(~Tool, scales= "free_x",space = "free_x")
p<-p + theme(legend.position = 'none', axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), text = element_text(size=14), strip.text.x = element_text(size=14))
p<-p + ggtitle(title) + ylab(ylabel) + scale_colour_manual(values=cbbPalette)
return(p)
}
#################################
#TO DO
#READ IN BULK DATA
bulk<-read.table("../data/Figure4.txt")
#split into ES and Blueprint
ES_bulk<-bulk[bulk$Sample_name=="ERR522956",]
#delete Sample_name column and create an Experiment column
ES_bulk<-cbind(ES_bulk[,1:2], Value=ES_bulk[,4], Experiment="bulk")
#READ IN SINGLE CELL DATA
#Read in ES
ES_single<-read.table("../data/Figure2.txt")
#Sort out columns of ES_single
ES_single<-data.frame(Statistic=ES_single$statistic, Tool=ES_single$Var1, Value=as.numeric(ES_single$value), Experiment="single")
ES_df<-rbind(ES_bulk, ES_single)
#Remove trailing strings after tool names
ES_df<-remove_trail(ES_df)
#Figure 4 style ES plots
ES_spear<-ES_df[ES_df$Statistic=="spearmans",]
ES_nrmse<-ES_df[ES_df$Statistic=="nrmse",]
ES_precision<-ES_df[ES_df$Statistic=="precision",]
ES_recall<-ES_df[ES_df$Statistic=="recall",]
ES_F1<-ES_df[ES_df$Statistic=="F1",]
ES_spearmans<-make_ggplot(ES_spear, "Spearman's Rho", "Spearman's Rho")
ES_nrmse<-make_ggplot(ES_nrmse, "NRMSE", "NRMSE")
ES_precision<-make_ggplot(ES_precision, "Precision", "Precision")
ES_recall<-make_ggplot(ES_recall, "Recall", "Recall")
ES_F1<-make_ggplot(ES_F1, "F1", "F1")
ggarrange(ES_F1, ggarrange(ES_precision, ES_recall, nrow=2), ES_spearmans,ES_nrmse,
nrow = 2,
ncol = 2,
labels = c("A","","B", "C")
)
ggsave("../pdfs/SupplementaryFigure16.pdf", plot = last_plot(), width=170 *2, units=c("mm") )
ggsave("../pngs/SupplementaryFigure16.png", plot = last_plot(), width=170 *2, units=c("mm"))
ES_bulk
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(reshape2)
#######################################################################
# FUNCTIONS
#function removes trailing strings from tool names
remove_trail<-function(ggplot_results){
ggplot_results$Tool<-sub("_cor", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_F1", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_nmrse", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_precision", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_recall", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_align", "Salmon\nAlign", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_quasi", "Salmon\nQuasi", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_SMEM", "Salmon\nSMEM", ggplot_results$Tool)
return(ggplot_results)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#function to create ggplot object
make_ggplot<-function(df, title, ylabel){
p<-ggplot(data=df, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity") + facet_grid(~Tool, scales= "free_x",space = "free_x")
p<-p + theme(legend.position = 'none', axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), text = element_text(size=14), strip.text.x = element_text(size=14))
p<-p + ggtitle(title) + ylab(ylabel) + scale_colour_manual(values=cbbPalette) +
geom_point( position=position_jitter(width = .2), stat = "identity",
subset = .(label == 'bulk'))
return(p)
}
#################################
#TO DO
#READ IN BULK DATA
bulk<-read.table("../data/Figure4.txt")
#split into ES and Blueprint
ES_bulk<-bulk[bulk$Sample_name=="ERR522956",]
#delete Sample_name column and create an Experiment column
ES_bulk<-cbind(ES_bulk[,1:2], Value=ES_bulk[,4], Experiment="bulk")
#READ IN SINGLE CELL DATA
#Read in ES
ES_single<-read.table("../data/Figure2.txt")
#Sort out columns of ES_single
ES_single<-data.frame(Statistic=ES_single$statistic, Tool=ES_single$Var1, Value=as.numeric(ES_single$value), Experiment="single")
ES_df<-rbind(ES_bulk, ES_single)
#Remove trailing strings after tool names
ES_df<-remove_trail(ES_df)
#Figure 4 style ES plots
ES_spear<-ES_df[ES_df$Statistic=="spearmans",]
ES_nrmse<-ES_df[ES_df$Statistic=="nrmse",]
ES_precision<-ES_df[ES_df$Statistic=="precision",]
ES_recall<-ES_df[ES_df$Statistic=="recall",]
ES_F1<-ES_df[ES_df$Statistic=="F1",]
ES_spearmans<-make_ggplot(ES_spear, "Spearman's Rho", "Spearman's Rho")
ES_nrmse<-make_ggplot(ES_nrmse, "NRMSE", "NRMSE")
ES_precision<-make_ggplot(ES_precision, "Precision", "Precision")
ES_recall<-make_ggplot(ES_recall, "Recall", "Recall")
ES_F1<-make_ggplot(ES_F1, "F1", "F1")
ggarrange(ES_F1, ggarrange(ES_precision, ES_recall, nrow=2), ES_spearmans,ES_nrmse,
nrow = 2,
ncol = 2,
labels = c("A","","B", "C")
)
ggsave("../pdfs/SupplementaryFigure16.pdf", plot = last_plot(), width=170 *2, units=c("mm") )
ggsave("../pngs/SupplementaryFigure16.png", plot = last_plot(), width=170 *2, units=c("mm"))
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(reshape2)
library(plyr)
#######################################################################
# FUNCTIONS
#function removes trailing strings from tool names
remove_trail<-function(ggplot_results){
ggplot_results$Tool<-sub("_cor", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_F1", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_nmrse", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_precision", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_recall", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_align", "Salmon\nAlign", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_quasi", "Salmon\nQuasi", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_SMEM", "Salmon\nSMEM", ggplot_results$Tool)
return(ggplot_results)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#function to create ggplot object
make_ggplot<-function(df, title, ylabel){
p<-ggplot(data=df, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity") + facet_grid(~Tool, scales= "free_x",space = "free_x")
p<-p + theme(legend.position = 'none', axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), text = element_text(size=14), strip.text.x = element_text(size=14))
p<-p + ggtitle(title) + ylab(ylabel) + scale_colour_manual(values=cbbPalette) +
geom_point( position=position_jitter(width = .2), stat = "identity",
subset = .(label == 'bulk'))
return(p)
}
#################################
#TO DO
#READ IN BULK DATA
bulk<-read.table("../data/Figure4.txt")
#split into ES and Blueprint
ES_bulk<-bulk[bulk$Sample_name=="ERR522956",]
#delete Sample_name column and create an Experiment column
ES_bulk<-cbind(ES_bulk[,1:2], Value=ES_bulk[,4], Experiment="bulk")
#READ IN SINGLE CELL DATA
#Read in ES
ES_single<-read.table("../data/Figure2.txt")
#Sort out columns of ES_single
ES_single<-data.frame(Statistic=ES_single$statistic, Tool=ES_single$Var1, Value=as.numeric(ES_single$value), Experiment="single")
ES_df<-rbind(ES_bulk, ES_single)
#Remove trailing strings after tool names
ES_df<-remove_trail(ES_df)
#Figure 4 style ES plots
ES_spear<-ES_df[ES_df$Statistic=="spearmans",]
ES_nrmse<-ES_df[ES_df$Statistic=="nrmse",]
ES_precision<-ES_df[ES_df$Statistic=="precision",]
ES_recall<-ES_df[ES_df$Statistic=="recall",]
ES_F1<-ES_df[ES_df$Statistic=="F1",]
ES_spearmans<-make_ggplot(ES_spear, "Spearman's Rho", "Spearman's Rho")
ES_nrmse<-make_ggplot(ES_nrmse, "NRMSE", "NRMSE")
ES_precision<-make_ggplot(ES_precision, "Precision", "Precision")
ES_recall<-make_ggplot(ES_recall, "Recall", "Recall")
ES_F1<-make_ggplot(ES_F1, "F1", "F1")
ggarrange(ES_F1, ggarrange(ES_precision, ES_recall, nrow=2), ES_spearmans,ES_nrmse,
nrow = 2,
ncol = 2,
labels = c("A","","B", "C")
)
ggsave("../pdfs/SupplementaryFigure16.pdf", plot = last_plot(), width=170 *2, units=c("mm") )
ggsave("../pngs/SupplementaryFigure16.png", plot = last_plot(), width=170 *2, units=c("mm"))
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(reshape2)
#######################################################################
# FUNCTIONS
#function removes trailing strings from tool names
remove_trail<-function(ggplot_results){
ggplot_results$Tool<-sub("_cor", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_F1", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_nmrse", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_precision", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_recall", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_align", "Salmon\nAlign", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_quasi", "Salmon\nQuasi", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_SMEM", "Salmon\nSMEM", ggplot_results$Tool)
return(ggplot_results)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#function to create ggplot object
make_ggplot<-function(df, title, ylabel){
p<-ggplot(data=df, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity") + facet_grid(~Tool, scales= "free_x",space = "free_x")
p<-p + theme(legend.position = 'none', axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), text = element_text(size=14), strip.text.x = element_text(size=14))
p<-p + ggtitle(title) + ylab(ylabel) + scale_colour_manual(values=cbbPalette)
return(p)
}
#################################
#TO DO
#READ IN BULK DATA
bulk<-read.table("../data/Figure4.txt")
#split into ES and Blueprint
ES_bulk<-bulk[bulk$Sample_name=="ERR522956",]
#delete Sample_name column and create an Experiment column
ES_bulk<-cbind(ES_bulk[,1:2], Value=ES_bulk[,4], Experiment="bulk")
#READ IN SINGLE CELL DATA
#Read in ES
ES_single<-read.table("../data/Figure2.txt")
#Sort out columns of ES_single
ES_single<-data.frame(Statistic=ES_single$statistic, Tool=ES_single$Var1, Value=as.numeric(ES_single$value), Experiment="single")
ES_df<-rbind(ES_bulk, ES_single)
#Remove trailing strings after tool names
ES_df<-remove_trail(ES_df)
#Figure 4 style ES plots
ES_spear<-ES_df[ES_df$Statistic=="spearmans",]
ES_nrmse<-ES_df[ES_df$Statistic=="nrmse",]
ES_precision<-ES_df[ES_df$Statistic=="precision",]
ES_recall<-ES_df[ES_df$Statistic=="recall",]
ES_F1<-ES_df[ES_df$Statistic=="F1",]
ES_spearmans<-make_ggplot(ES_spear, "Spearman's Rho", "Spearman's Rho")
ES_nrmse<-make_ggplot(ES_nrmse, "NRMSE", "NRMSE")
ES_precision<-make_ggplot(ES_precision, "Precision", "Precision")
ES_recall<-make_ggplot(ES_recall, "Recall", "Recall")
ES_F1<-make_ggplot(ES_F1, "F1", "F1")
ggarrange(ES_F1, ggarrange(ES_precision, ES_recall, nrow=2), ES_spearmans,ES_nrmse,
nrow = 2,
ncol = 2,
labels = c("A","","B", "C")
)
ggsave("../pdfs/SupplementaryFigure16.pdf", plot = last_plot(), width=170 *2, units=c("mm") )
ggsave("../pngs/SupplementaryFigure16.png", plot = last_plot(), width=170 *2, units=c("mm"))
?arrange
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(reshape2)
#######################################################################
# FUNCTIONS
#function removes trailing strings from tool names
remove_trail<-function(ggplot_results){
ggplot_results$Tool<-sub("_cor", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_F1", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_nmrse", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_precision", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_recall", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_align", "Salmon\nAlign", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_quasi", "Salmon\nQuasi", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_SMEM", "Salmon\nSMEM", ggplot_results$Tool)
return(ggplot_results)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#function to create ggplot object
make_ggplot<-function(df, title, ylabel){
p<-ggplot(df %>% dplyr::arrange(desc(Experiment)), aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity") + facet_grid(~Tool, scales= "free_x",space = "free_x")
p<-p + theme(legend.position = 'none', axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), text = element_text(size=14), strip.text.x = element_text(size=14))
p<-p + ggtitle(title) + ylab(ylabel) + scale_colour_manual(values=cbbPalette)
return(p)
}
#################################
#TO DO
#READ IN BULK DATA
bulk<-read.table("../data/Figure4.txt")
#split into ES and Blueprint
ES_bulk<-bulk[bulk$Sample_name=="ERR522956",]
#delete Sample_name column and create an Experiment column
ES_bulk<-cbind(ES_bulk[,1:2], Value=ES_bulk[,4], Experiment="bulk")
#READ IN SINGLE CELL DATA
#Read in ES
ES_single<-read.table("../data/Figure2.txt")
#Sort out columns of ES_single
ES_single<-data.frame(Statistic=ES_single$statistic, Tool=ES_single$Var1, Value=as.numeric(ES_single$value), Experiment="single")
ES_df<-rbind(ES_bulk, ES_single)
#Remove trailing strings after tool names
ES_df<-remove_trail(ES_df)
#Figure 4 style ES plots
ES_spear<-ES_df[ES_df$Statistic=="spearmans",]
ES_nrmse<-ES_df[ES_df$Statistic=="nrmse",]
ES_precision<-ES_df[ES_df$Statistic=="precision",]
ES_recall<-ES_df[ES_df$Statistic=="recall",]
ES_F1<-ES_df[ES_df$Statistic=="F1",]
ES_spearmans<-make_ggplot(ES_spear, "Spearman's Rho", "Spearman's Rho")
ES_nrmse<-make_ggplot(ES_nrmse, "NRMSE", "NRMSE")
ES_precision<-make_ggplot(ES_precision, "Precision", "Precision")
ES_recall<-make_ggplot(ES_recall, "Recall", "Recall")
ES_F1<-make_ggplot(ES_F1, "F1", "F1")
ggarrange(ES_F1, ggarrange(ES_precision, ES_recall, nrow=2), ES_spearmans,ES_nrmse,
nrow = 2,
ncol = 2,
labels = c("A","","B", "C")
)
ggsave("../pdfs/SupplementaryFigure16.pdf", plot = last_plot(), width=170 *2, units=c("mm") )
ggsave("../pngs/SupplementaryFigure16.png", plot = last_plot(), width=170 *2, units=c("mm"))
rm(list=ls())
library(ggplot2)
library(ggpubr)
library(reshape2)
##############################
# FUNCTIONS
get_percentage_hist<-function(df){
no_zeros<-df#[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
ggplot(data = two_iso_percentage, aes(x=`percentage(value)`)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
#####################################
# MAKE FIGURE 6A
barplot_data<-read.table("../data/Figure6_number_of_isoforms.txt")
ES_barplot_data<-barplot_data[barplot_data$ID=="ES",]
ES_0_1_2_barplot<-ggplot(data=ES_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("ES cells")
##############################################################
#MAKE FIGURE 6B
exprs_percent_data<-read.table("../data/Figure_6_percent_exprs.txt")
colnames(exprs_percent_data)[2]<-"expression"
colnames(exprs_percent_data)[3]<-"percentage"
ES_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="ES",]
ES_percent_hist<-ggplot(data=ES_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
#################################################################
#MAKE FIGURE 6C
ES_exprs_percent_plot<-ggplot(data = ES_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
ggarrange(ES_0_1_2_barplot, ES_percent_hist, ES_exprs_percent_plot, ncol =1, nrow=3, labels=c("A", "B", "C"))
ggsave("../pdfs/Figure6.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/Figure6.png", plot=last_plot(), height= 225, width=170, units=c("mm"))
