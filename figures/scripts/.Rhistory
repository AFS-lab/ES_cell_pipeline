library(ggpubr)
library(reshape2)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater)
###############################################################################
# CREATE FILTERS BASED ON QC STATS
#QC script
library(ggplot2)
library(ggpubr)
library(reshape2)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
single_cell<-single_cell[,colnames(single_cell)!='ERR522956', drop=FALSE]
rep_1<-read.table("data/filenames_2i_2.txt")
rep_2<-read.table("data/filenames_2i_3.txt")
rep_3<-read.table("data/filenames_2i_4.txt")
rep_4<-read.table("data/filenames_2i_5.txt")
#Function that formats batch data
make_batch<-function(counts_data){
batch<-vector()
batch_1<-colnames(counts_data) %in% rep_1$V1
batch_2<-colnames(counts_data) %in% rep_2$V1
batch_3<-colnames(counts_data) %in% rep_3$V1
batch_4<-colnames(counts_data) %in% rep_4$V1
for (i in 1:length(colnames(counts_data))){
if (batch_1[i]==TRUE){
batch[i]<-'2i_2'
}else if (batch_2[i]==TRUE){
batch[i]<-'2i_3'
}
else if (batch_3[i]==TRUE){
batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv", header=FALSE)
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Filters applied based on Supplementary Figure 10
filter_ES<-QC_raw[QC_raw$NonUnique<2500000 & QC_raw$NumReads<12000000 & QC_raw$NumReads>3500000 & QC_raw$NumAlignments>4000000 & QC_raw$NumAlignments< 32000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
filter_ES<-filter_ES[filter_ES$Filename!='ERR522956',]
rm(list=setdiff(ls(), c("filter_ES")))
#######################################
single_cell<-read.table("data/clean_ground_truth_counts.txt")
#filter_ES relevant cells
single_cell<-single_cell[,colnames(single_cell) %in% filter_ES$Filename]
ids<-names(single_cell)
batch<-rep("batch", ncol(single_cell))
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
save(teich_scater_QC, file="../figures/data/SupplementaryFigure11_scater_object.RData")
#Read in QC statistics files
QC_Sim<-read.csv("data/simulated/read_alignment_qc.csv")
#Keep only filtered cells
QC_Sim<-QC_Sim[QC_Sim$Filename %in% filter_ES$Filename,]
names(QC_Sim)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
write.table(QC_Sim, "../figures/data/SupplementaryFigure11_reads_alignment_data.txt")
rm(list=ls())
###############################################################################
# CREATE FILTERS BASED ON QC STATS
#QC script
library(ggplot2)
library(ggpubr)
library(reshape2)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
single_cell<-single_cell[,colnames(single_cell)!='ERR522956', drop=FALSE]
rep_1<-read.table("data/filenames_2i_2.txt")
rep_2<-read.table("data/filenames_2i_3.txt")
rep_3<-read.table("data/filenames_2i_4.txt")
rep_4<-read.table("data/filenames_2i_5.txt")
#Function that formats batch data
make_batch<-function(counts_data){
batch<-vector()
batch_1<-colnames(counts_data) %in% rep_1$V1
batch_2<-colnames(counts_data) %in% rep_2$V1
batch_3<-colnames(counts_data) %in% rep_3$V1
batch_4<-colnames(counts_data) %in% rep_4$V1
for (i in 1:length(colnames(counts_data))){
if (batch_1[i]==TRUE){
batch[i]<-'2i_2'
}else if (batch_2[i]==TRUE){
batch[i]<-'2i_3'
}
else if (batch_3[i]==TRUE){
batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv", header=FALSE)
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Filters applied based on Supplementary Figure 10
filter_ES<-QC_raw[QC_raw$NonUnique<2500000 & QC_raw$NumReads<12000000 & QC_raw$NumReads>3500000 & QC_raw$NumAlignments>4000000 & QC_raw$NumAlignments< 32000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
filter_ES<-filter_ES[filter_ES$Filename!='ERR522956',]
rm(list=setdiff(ls(), c("filter_ES")))
#######################################
single_cell<-read.table("data/clean_ground_truth_counts.txt")
#filter_ES relevant cells
single_cell<-single_cell[,colnames(single_cell) %in% filter_ES$Filename]
ids<-names(single_cell)
batch<-rep("batch", ncol(single_cell))
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_Sim<-read.csv("data/simulated/read_alignment_qc.csv")
names(QC_Sim)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Keep only filtered cells
QC_Sim<-QC_Sim[QC_Sim$Filename %in% filter_ES$Filename,]
#Filters applied based on plots
filter_ES<-QC_Sim[QC_Sim$Unique>5000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
rm(list=setdiff(ls(), c("filter_ES")))
################################################################################
#LOAD DATA AND PROCESS IT
#Function which loads data, subsets it and orders it
data_processing<-function(path, filter){
results<-read.table(path)
results<-results[,colnames(results) %in% filter$Filename]
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
return(results)
}
#load data
ground_truth<-data_processing("data/clean_ground_truth_TPM.txt", filter_ES)
library(data.table)
setDT(ground_truth, keep.rownames = TRUE)[]
cells<-colnames(ground_truth)
ground_truth_expr<-ground_truth %>% gather(cells[2:ncol(ground_truth)], key="cell", value="estimates")
ground_truth_expr$estimates<-100*log2(ground_truth_expr$estimates +1)
write.table(ground_truth_expr, gzfile("../figures/data/SupplementaryFigure12.gz"))
QC_raw<-read.csv("data/raw/read_alignment_qc.csv")
QC_raw<-QC_raw[QC_raw$Filename!='ERR522956',]
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
single_cell<-single_cell[,colnames(single_cell)!='ERR522956', drop=FALSE]
rep_1<-read.table("data/filenames_2i_2.txt")
rep_2<-read.table("data/filenames_2i_3.txt")
rep_3<-read.table("data/filenames_2i_4.txt")
rep_4<-read.table("data/filenames_2i_5.txt")
#Function that formats batch data
make_batch<-function(counts_data){
batch<-vector()
batch_1<-colnames(counts_data) %in% rep_1$V1
batch_2<-colnames(counts_data) %in% rep_2$V1
batch_3<-colnames(counts_data) %in% rep_3$V1
batch_4<-colnames(counts_data) %in% rep_4$V1
for (i in 1:length(colnames(counts_data))){
if (batch_1[i]==TRUE){
batch[i]<-'2i_2'
}else if (batch_2[i]==TRUE){
batch[i]<-'2i_3'
}
else if (batch_3[i]==TRUE){
batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
save(teich_scater_QC, file="../figures/data/SupplementaryFigure10_scater_object.RData", compress="bzip2", compression_level = 9)
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv")
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
QC_raw<-QC_raw[QC_raw$Filename!='ERR522956',]
write.table(QC_raw, "../figures/data/SupplementaryFigure10_reads_alignment_data.txt")
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater)
###############################################################################
# CREATE FILTERS BASED ON QC STATS
#QC script
library(ggplot2)
library(ggpubr)
library(reshape2)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
single_cell<-single_cell[,colnames(single_cell)!='ERR522956', drop=FALSE]
rep_1<-read.table("data/filenames_2i_2.txt")
rep_2<-read.table("data/filenames_2i_3.txt")
rep_3<-read.table("data/filenames_2i_4.txt")
rep_4<-read.table("data/filenames_2i_5.txt")
#Function that formats batch data
make_batch<-function(counts_data){
batch<-vector()
batch_1<-colnames(counts_data) %in% rep_1$V1
batch_2<-colnames(counts_data) %in% rep_2$V1
batch_3<-colnames(counts_data) %in% rep_3$V1
batch_4<-colnames(counts_data) %in% rep_4$V1
for (i in 1:length(colnames(counts_data))){
if (batch_1[i]==TRUE){
batch[i]<-'2i_2'
}else if (batch_2[i]==TRUE){
batch[i]<-'2i_3'
}
else if (batch_3[i]==TRUE){
batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv", header=FALSE)
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Filters applied based on Supplementary Figure 10
filter_ES<-QC_raw[QC_raw$NonUnique<2500000 & QC_raw$NumReads<12000000 & QC_raw$NumReads>3500000 & QC_raw$NumAlignments>4000000 & QC_raw$NumAlignments< 32000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
filter_ES<-filter_ES[filter_ES$Filename!='ERR522956',]
rm(list=setdiff(ls(), c("filter_ES")))
#######################################
single_cell<-read.table("data/clean_ground_truth_counts.txt")
#filter_ES relevant cells
single_cell<-single_cell[,colnames(single_cell) %in% filter_ES$Filename]
ids<-names(single_cell)
batch<-rep("batch", ncol(single_cell))
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
save(teich_scater_QC, file="../figures/data/SupplementaryFigure11_scater_object.RData")
#Read in QC statistics files
QC_Sim<-read.csv("data/simulated/read_alignment_qc.csv")
QC_Sim<-QC_Sim[QC_Sim$Filename %in% filter_ES$Filename,]
names(QC_Sim)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater)
###############################################################################
# CREATE FILTERS BASED ON QC STATS
#QC script
library(ggplot2)
library(ggpubr)
library(reshape2)
library(scater)
single_cell<-read.table("data/clean_Kallisto_real_Counts.txt")
single_cell<-single_cell[,colnames(single_cell)!='ERR522956', drop=FALSE]
rep_1<-read.table("data/filenames_2i_2.txt")
rep_2<-read.table("data/filenames_2i_3.txt")
rep_3<-read.table("data/filenames_2i_4.txt")
rep_4<-read.table("data/filenames_2i_5.txt")
#Function that formats batch data
make_batch<-function(counts_data){
batch<-vector()
batch_1<-colnames(counts_data) %in% rep_1$V1
batch_2<-colnames(counts_data) %in% rep_2$V1
batch_3<-colnames(counts_data) %in% rep_3$V1
batch_4<-colnames(counts_data) %in% rep_4$V1
for (i in 1:length(colnames(counts_data))){
if (batch_1[i]==TRUE){
batch[i]<-'2i_2'
}else if (batch_2[i]==TRUE){
batch[i]<-'2i_3'
}
else if (batch_3[i]==TRUE){
batch[i]<-'2i_4'
}
else if (batch_4[i]==TRUE){
batch[i]<-'2i_5'
}
else{
print("Something went wrong")
}
}
return(batch)
}
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_MT<10]
#Read in QC statistics files
QC_raw<-read.csv("data/raw/read_alignment_qc.csv", header=FALSE)
names(QC_raw)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Filters applied based on Supplementary Figure 10
filter_ES<-QC_raw[QC_raw$NonUnique<2500000 & QC_raw$NumReads<12000000 & QC_raw$NumReads>3500000 & QC_raw$NumAlignments>4000000 & QC_raw$NumAlignments< 32000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
filter_ES<-filter_ES[filter_ES$Filename!='ERR522956',]
rm(list=setdiff(ls(), c("filter_ES")))
#######################################
single_cell<-read.table("data/clean_ground_truth_counts.txt")
#filter_ES relevant cells
single_cell<-single_cell[,colnames(single_cell) %in% filter_ES$Filename]
ids<-names(single_cell)
batch<-rep("batch", ncol(single_cell))
anno<-as.data.frame(cbind(batch,ids))
rownames(anno)<-anno$ids
teich_scater <- SingleCellExperiment(
assays = list(counts = as.matrix(single_cell)),
colData = anno
)
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
isSpike(teich_scater, "MT") <- rownames(teich_scater) %in% mt_isoforms
teich_scater_QC <- calculateQCMetrics(
teich_scater,
feature_controls = list(MT = isSpike(teich_scater, "MT"))
)
save(teich_scater_QC, file="../figures/data/SupplementaryFigure11_scater_object.RData")
#Read in QC statistics files
QC_Sim<-read.csv("data/simulated/read_alignment_qc.csv")
names(QC_Sim)<-c("Filename","Unique","NonUnique","Unmapped","NumAlignments","NumReads")
#Keep only filtered cells
QC_Sim<-QC_Sim[QC_Sim$Filename %in% filter_ES$Filename,]
write.table(QC_Sim, "../figures/data/SupplementaryFigure11_reads_alignment_data.txt")
setwd('../figures/scripts/')
library(ggplot2)
library(ggpubr)
library(reshape2)
library(hydroGOF)
library(scater)
####################################
# FUNCTIONS
#Function for making graphs of results
plot_data<-function( df, title, ylabel, xlabel) {
df$Var1 <- as.character(df$Var1)
df$Var1 <- factor(df$Var1, levels=unique(df$Var1))
spearmans<-ggplot(data=df, aes(x=Var1, y=value)) + geom_jitter(alpha=0.5, position=position_jitter(width = .2), aes(colour=Var1))  + stat_summary(fun.y=mean, geom="point", shape=95, size = 20, colour="black")
spearmans<- spearmans + scale_x_discrete(labels=c("RSEM", "Salmon Alignment", "Salmon Quasi", "Salmon SMEM", "Sailfish", "eXpress", "Kallisto"))
spearmans<-spearmans + theme(axis.text.x=element_text( angle=30,vjust=.8, hjust=0.8), legend.position = 'none', text = element_text(size=14)) + scale_colour_manual(values=cbbPalette) + ylab(ylabel) + ggtitle(title) + xlab(xlabel)
return(spearmans)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
##############################################
# MAKE FIGURE 2
#Read in performance statistics
ggplot_results<-read.table("../data/Figure2.txt")
#Split ggplot_results by statistic
spearmans<-ggplot_results[ggplot_results$statistic=="spearmans",]
nrmse<-ggplot_results[ggplot_results$statistic=="nrmse",]
precision<-ggplot_results[ggplot_results$statistic=="precision",]
recall<-ggplot_results[ggplot_results$statistic=="recall",]
F1<-ggplot_results[ggplot_results$statistic=="F1",]
#make graphs
spearmans_graph<-plot_data(spearmans, "Spearman's Rho", "Spearman's Rho", "")
nrmse_graph<-plot_data(nrmse, "NRMSE", "NRMSE", "")
precision_graph<-plot_data(precision,"Precision", "Precision", "")
recall_graph<-plot_data(recall, "Recall", "Recall", "")
F1_graph<-plot_data(F1, "F1", "F1", "")
ggarrange(F1_graph, ggarrange(precision_graph, recall_graph, nrow=2), spearmans_graph,nrmse_graph,
nrow = 2,
ncol = 2,
labels = c("A","","B", "C")
)
ggsave("../pdfs/Figure2.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/Figure2.png", plot=last_plot(), height= 225, width=170, units=c("mm"))
