ES_df<-remove_trail(ES_df)
#Figure 4 style ES plots
ES_spear<-ES_df[ES_df$Statistic=="spearmans",]
ES_nrmse<-ES_df[ES_df$Statistic=="nrmse",]
ES_precision<-ES_df[ES_df$Statistic=="precision",]
ES_recall<-ES_df[ES_df$Statistic=="recall",]
ES_F1<-ES_df[ES_df$Statistic=="F1",]
ES_spearmans<-make_ggplot(ES_spear, "Spearman's Rho", "Spearman's Rho")
ES_nrmse<-make_ggplot(ES_nrmse, "NRMSE", "NRMSE")
ES_precision<-make_ggplot(ES_precision, "Precision", "Precision")
ES_recall<-make_ggplot(ES_recall, "Recall", "Recall")
ES_F1<-make_ggplot(ES_F1, "F1", "F1")
ggarrange(ES_F1, ggarrange(ES_precision, ES_recall, nrow=2), ES_spearmans,ES_nrmse,
nrow = 2,
ncol = 2,
labels = c("A","","B", "C")
)
ggsave("../pdfs/SupplementaryFigure16.pdf", plot = last_plot(), width=170 *2, units=c("mm") )
ggsave("../pngs/SupplementaryFigure16.png", plot = last_plot(), width=170 *2, units=c("mm"))
rm(list=ls())
library(tidyverse)
###########################################################
# FUNCTIONS
make_df<-function(df, name_df, origin_df){
percentage_df<-sum(df$tpm==0)/nrow(df) * 100
bulk_df<-data.frame(cell=name_df, percentage=percentage_df, origin=origin_df)
return(bulk_df)
}
make_zeros_plot<-function(df){
graph<-ggplot(data=df, aes(y=percentage, x=origin)) + geom_jitter(alpha=0.5, position=position_jitter(width = .2))
graph<-graph + ylab("% of Isoforms Which Are Unexpressed")
}
########################
#read in Kolod et al sc #zeros data
sc_kolod<-read.table(gzfile("../data/SupplementaryFigure12.gz"))
sc_kolod<-sc_kolod %>% group_by(cell) %>% summarise((sum(estimates==0)/128809)*100)
names(sc_kolod)[2]<-c("percentage")
sc_kolod<-data.frame(sc_kolod, origin="ES single cell")
#bulk Kolod et al expression matrix
bulk_ES<-read.table(""../Simulation/Kallisto_results_real_data/ERR522956/abundance.tsv"", header=T)
bulk_ES<-make_df(bulk_ES, "bulk_ES", "ES bulk")
master_df<-rbind(sc_kolod, bulk_ES)
make_zeros_plot(master_df)
ggsave("../pdfs/SupplementaryFigure17.pdf", plot=last_plot())
ggsave("../pngs/SupplementaryFigure17.png", plot=last_plot())
rm(list=ls())
library(tidyverse)
###########################################################
# FUNCTIONS
make_df<-function(df, name_df, origin_df){
percentage_df<-sum(df$tpm==0)/nrow(df) * 100
bulk_df<-data.frame(cell=name_df, percentage=percentage_df, origin=origin_df)
return(bulk_df)
}
make_zeros_plot<-function(df){
graph<-ggplot(data=df, aes(y=percentage, x=origin)) + geom_jitter(alpha=0.5, position=position_jitter(width = .2))
graph<-graph + ylab("% of Isoforms Which Are Unexpressed")
}
########################
#read in Kolod et al sc #zeros data
sc_kolod<-read.table(gzfile("../data/SupplementaryFigure12.gz"))
sc_kolod<-sc_kolod %>% group_by(cell) %>% summarise((sum(estimates==0)/128809)*100)
names(sc_kolod)[2]<-c("percentage")
sc_kolod<-data.frame(sc_kolod, origin="ES single cell")
#bulk Kolod et al expression matrix
bulk_ES<-read.table("../Simulation/Kallisto_results_real_data/ERR522956/abundance.tsv", header=T)
bulk_ES<-make_df(bulk_ES, "bulk_ES", "ES bulk")
master_df<-rbind(sc_kolod, bulk_ES)
make_zeros_plot(master_df)
ggsave("../pdfs/SupplementaryFigure17.pdf", plot=last_plot())
ggsave("../pngs/SupplementaryFigure17.png", plot=last_plot())
rm(list=ls())
library(tidyverse)
###########################################################
# FUNCTIONS
make_df<-function(df, name_df, origin_df){
percentage_df<-sum(df$tpm==0)/nrow(df) * 100
bulk_df<-data.frame(cell=name_df, percentage=percentage_df, origin=origin_df)
return(bulk_df)
}
make_zeros_plot<-function(df){
graph<-ggplot(data=df, aes(y=percentage, x=origin)) + geom_jitter(alpha=0.5, position=position_jitter(width = .2))
graph<-graph + ylab("% of Isoforms Which Are Unexpressed")
}
########################
#read in Kolod et al sc #zeros data
sc_kolod<-read.table(gzfile("../data/SupplementaryFigure12.gz"))
sc_kolod<-sc_kolod %>% group_by(cell) %>% summarise((sum(estimates==0)/128809)*100)
names(sc_kolod)[2]<-c("percentage")
sc_kolod<-data.frame(sc_kolod, origin="ES single cell")
#bulk Kolod et al expression matrix
bulk_ES<-read.table("../../Simulation/Kallisto_results_real_data/ERR522956/abundance.tsv", header=T)
bulk_ES<-make_df(bulk_ES, "bulk_ES", "ES bulk")
master_df<-rbind(sc_kolod, bulk_ES)
make_zeros_plot(master_df)
ggsave("../pdfs/SupplementaryFigure17.pdf", plot=last_plot())
ggsave("../pngs/SupplementaryFigure17.png", plot=last_plot())
rm(list=ls())
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
library(gtable)
library(ggpubr)
library(reshape2)
library(tidyverse)
library(MASS)
library(viridis)
####################################
# FUNCTIONS
#Function to process data
process_data<-function(df,cell_type){
df<-df[df$cell_type==as.name(cell_type),]
df<-cbind(df, max_spearmans_error = df$spearmans_results + df$spearmans_error, min_spearmans_error = df$spearmans_results - df$spearmans_error)
df<-cbind(df, max_nrmse_error = df$nrmse_results + df$nrmse_error, min_nrmse_error = df$nrmse_results - df$nrmse_error)
return(df)
}
#Function to make figure legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#Function to plot results
plot_results<-function(title, yaxis_text, xaxis_text, legend_true, df, results,max_error, min_error){
#Plot results
p1<-ggplot(data=df, aes_(x= ~percentage_zeros, y=as.name(results), group=~tools, colour=~factor(tools)))+ geom_line() + geom_errorbar(aes_(ymin=as.name(min_error), ymax=as.name(max_error)), width=1)
p1<-p1 + labs(x=xaxis_text, y= yaxis_text, colour="Tools") + scale_x_reverse() +scale_colour_manual(values=cbbPalette) + ggtitle(title)
if (legend_true == FALSE){
p1<-p1 + theme(legend.position = 'none', text = element_text(size=14), plot.title = element_text(size=14) )
}
return(p1)
}
###########################################
#Read in data
figure_5a_data<-read.table("../data/Figure5a.txt")
#Process data for ggplot
ES_figure_5a_data<-process_data(figure_5a_data, "ES")
#Set up colour blind friendly palette
tools<-c("RSEM","Salmon Alignment", "Salmon Quasi", "Salmon SMEM", "Sailfish", "eXpress", "Kallisto")
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
names(cbbPalette)<-tools
#Create ES cell graphs
ES_drop_spear<-plot_results("\nES cells", "","", FALSE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error")
ES_drop_NRMSE<-plot_results("", "","Threshold % Dropouts", FALSE, ES_figure_5a_data, "nrmse_results", "max_nrmse_error", "min_nrmse_error")
#Create figure legends
leg<-g_legend(plot_results("Spearman's Rho", "Spearman's Rho","Threshold Percentage of Dropouts", TRUE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error"))
blue<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure5a.txt")
B_figure_5a_data<-process_data(figure_5a_data, "B")
B_drop_spear<-plot_results("\nB lymphocytes", "","", FALSE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error")
B_drop_NRMSE<-plot_results("", "","Threshold % Dropouts", FALSE, ES_figure_5a_data, "nrmse_results", "max_nrmse_error", "min_nrmse_error")
#Arrange graphs
Figure5a<-ggarrange(ggarrange(ES_drop_spear + ylim(0.6,1),B_drop_spear + ylim(0.6,1), ES_drop_NRMSE + ylim(0,50),B_drop_NRMSE + ylim(0,50), nrow=2, ncol=2), leg,
nrow = 1,
ncol = 2
)
Figure5a
rm(list=ls())
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
library(gtable)
library(ggpubr)
library(reshape2)
library(tidyverse)
library(MASS)
library(viridis)
####################################
# FUNCTIONS
#Function to process data
process_data<-function(df,cell_type){
df<-df[df$cell_type==as.name(cell_type),]
df<-cbind(df, max_spearmans_error = df$spearmans_results + df$spearmans_error, min_spearmans_error = df$spearmans_results - df$spearmans_error)
df<-cbind(df, max_nrmse_error = df$nrmse_results + df$nrmse_error, min_nrmse_error = df$nrmse_results - df$nrmse_error)
return(df)
}
#Function to make figure legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#Function to plot results
plot_results<-function(title, yaxis_text, xaxis_text, legend_true, df, results,max_error, min_error){
#Plot results
p1<-ggplot(data=df, aes_(x= ~percentage_zeros, y=as.name(results), group=~tools, colour=~factor(tools)))+ geom_line() + geom_errorbar(aes_(ymin=as.name(min_error), ymax=as.name(max_error)), width=1)
p1<-p1 + labs(x=xaxis_text, y= yaxis_text, colour="Tools") + scale_x_reverse() +scale_colour_manual(values=cbbPalette) + ggtitle(title)
if (legend_true == FALSE){
p1<-p1 + theme(legend.position = 'none', text = element_text(size=14), plot.title = element_text(size=14) )
}
return(p1)
}
###########################################
#Read in data
figure_5a_data<-read.table("../data/Figure5a.txt")
#Process data for ggplot
ES_figure_5a_data<-process_data(figure_5a_data, "ES")
#Set up colour blind friendly palette
tools<-c("RSEM","Salmon Alignment", "Salmon Quasi", "Salmon SMEM", "Sailfish", "eXpress", "Kallisto")
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
names(cbbPalette)<-tools
#Create ES cell graphs
ES_drop_spear<-plot_results("\nES cells", "","", FALSE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error")
ES_drop_NRMSE<-plot_results("", "","Threshold % Dropouts", FALSE, ES_figure_5a_data, "nrmse_results", "max_nrmse_error", "min_nrmse_error")
#Create figure legends
leg<-g_legend(plot_results("Spearman's Rho", "Spearman's Rho","Threshold Percentage of Dropouts", TRUE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error"))
blue<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure5a.txt")
B_figure_5a_data<-process_data(blue, "B")
B_drop_spear<-plot_results("\nB lymphocytes", "","", FALSE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error")
B_drop_NRMSE<-plot_results("", "","Threshold % Dropouts", FALSE, ES_figure_5a_data, "nrmse_results", "max_nrmse_error", "min_nrmse_error")
#Arrange graphs
Figure5a<-ggarrange(ggarrange(ES_drop_spear + ylim(0.6,1),B_drop_spear + ylim(0.6,1), ES_drop_NRMSE + ylim(0,50),B_drop_NRMSE + ylim(0,50), nrow=2, ncol=2), leg,
nrow = 1,
ncol = 2
)
Figure5a
blue<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure5a.txt")
blue
rm(list=ls())
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
library(gtable)
library(ggpubr)
library(reshape2)
library(tidyverse)
library(MASS)
library(viridis)
####################################
# FUNCTIONS
#Function to process data
process_data<-function(df,cell_type){
df<-df[df$cell_type==as.name(cell_type),]
df<-cbind(df, max_spearmans_error = df$spearmans_results + df$spearmans_error, min_spearmans_error = df$spearmans_results - df$spearmans_error)
df<-cbind(df, max_nrmse_error = df$nrmse_results + df$nrmse_error, min_nrmse_error = df$nrmse_results - df$nrmse_error)
return(df)
}
#Function to make figure legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#Function to plot results
plot_results<-function(title, yaxis_text, xaxis_text, legend_true, df, results,max_error, min_error){
#Plot results
p1<-ggplot(data=df, aes_(x= ~percentage_zeros, y=as.name(results), group=~tools, colour=~factor(tools)))+ geom_line() + geom_errorbar(aes_(ymin=as.name(min_error), ymax=as.name(max_error)), width=1)
p1<-p1 + labs(x=xaxis_text, y= yaxis_text, colour="Tools") + scale_x_reverse() +scale_colour_manual(values=cbbPalette) + ggtitle(title)
if (legend_true == FALSE){
p1<-p1 + theme(legend.position = 'none', text = element_text(size=14), plot.title = element_text(size=14) )
}
return(p1)
}
###########################################
#Read in data
figure_5a_data<-read.table("../data/Figure5a.txt")
#Process data for ggplot
ES_figure_5a_data<-process_data(figure_5a_data, "ES")
#Set up colour blind friendly palette
tools<-c("RSEM","Salmon Alignment", "Salmon Quasi", "Salmon SMEM", "Sailfish", "eXpress", "Kallisto")
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
names(cbbPalette)<-tools
#Create ES cell graphs
ES_drop_spear<-plot_results("\nES cells", "","", FALSE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error")
ES_drop_NRMSE<-plot_results("", "","Threshold % Dropouts", FALSE, ES_figure_5a_data, "nrmse_results", "max_nrmse_error", "min_nrmse_error")
#Create figure legends
leg<-g_legend(plot_results("Spearman's Rho", "Spearman's Rho","Threshold Percentage of Dropouts", TRUE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error"))
blue<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure5a.txt")
B_figure_5a_data<-process_data(blue, "B")
B_drop_spear<-plot_results("\nB lymphocytes", "","", FALSE, B_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error")
B_drop_NRMSE<-plot_results("", "","Threshold % Dropouts", FALSE, B_figure_5a_data, "nrmse_results", "max_nrmse_error", "min_nrmse_error")
#Arrange graphs
Figure5a<-ggarrange(ggarrange(ES_drop_spear + ylim(0.6,1),B_drop_spear + ylim(0.6,1), ES_drop_NRMSE + ylim(0,50),B_drop_NRMSE + ylim(0,50), nrow=2, ncol=2), leg,
nrow = 1,
ncol = 2
)
Figure5a
#Function to find point density
get_density <- function(x, y, n = 100) {
dens <- MASS::kde2d(x = x, y = y, n = n)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
#Function to plot graphs
plot_cor_expr_zeros<-function(df, ID, x_lab_text, y_lab_text, title, legend){
#filter by ID
df<-df[df$ID==as.name(ID),]
#find density
df$Density <- get_density(df$expression, df$percent_zeros)
#create graph
p1<-ggplot(data=df, aes(x=expression, y=percent_zeros, colour=Density)) + geom_point() + scale_color_viridis()
p1<-p1 + xlab(x_lab_text) + ylab(y_lab_text) + ggtitle(title) + theme(text = element_text(size=14), plot.title = element_text(size=14))
if (legend==FALSE){
p1<- p1 + theme(legend.position = 0)
}
return(p1)
}
# Function to create legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#########################################################################
Figure_5b_data<-read.table("../data/Figure5b.txt")
leg_cor<-g_legend(plot_cor_expr_zeros(Figure_5b_data, "simulated_ES", " ", "% zeros", "Simulated ES cells", TRUE))
ES_sim_cor_expr_zeros<-plot_cor_expr_zeros(Figure_5b_data, "simulated_ES"," ", " ", "\nSimulated ES cells", FALSE)
ES_real_cor_expr_zeros<-plot_cor_expr_zeros(Figure_5b_data, "real_ES", "log2(counts + 1)", " ", "\nReal ES cells", FALSE)
blue<-read.table("../data/Figure5b.txt")
B_sim_cor_expr_zeros<-plot_cor_expr_zeros(blue, "simulated_B"," ", " ", "\nSimulated B lymphocytes", FALSE)
B_real_cor_expr_zeros<-plot_cor_expr_zeros(blue, "real_B", "log2(counts + 1)", " ", "\nReal B lymphocytes", FALSE)
Figure5b<-ggarrange(ggarrange(ES_sim_cor_expr_zeros, B_sim_cor_expr_zeros, ES_real_cor_expr_zeros, B_real_cor_expr_zeros, ncol=2, nrow=2), leg_cor, ncol = 2, widths=c(2,1))
blue<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure5b.txt")
B_sim_cor_expr_zeros<-plot_cor_expr_zeros(blue, "simulated_B"," ", " ", "\nSimulated B lymphocytes", FALSE)
B_real_cor_expr_zeros<-plot_cor_expr_zeros(blue, "real_B", "log2(counts + 1)", " ", "\nReal B lymphocytes", FALSE)
Figure5b<-ggarrange(ggarrange(ES_sim_cor_expr_zeros, B_sim_cor_expr_zeros, ES_real_cor_expr_zeros, B_real_cor_expr_zeros, ncol=2, nrow=2), leg_cor, ncol = 2, widths=c(2,1))
ggarrange(Figure5a, Figure5b, ncol=1, nrow=2)
rm(list=ls())
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
library(gtable)
library(ggpubr)
library(reshape2)
library(tidyverse)
library(MASS)
library(viridis)
####################################
# FUNCTIONS
#Function to process data
process_data<-function(df,cell_type){
df<-df[df$cell_type==as.name(cell_type),]
df<-cbind(df, max_spearmans_error = df$spearmans_results + df$spearmans_error, min_spearmans_error = df$spearmans_results - df$spearmans_error)
df<-cbind(df, max_nrmse_error = df$nrmse_results + df$nrmse_error, min_nrmse_error = df$nrmse_results - df$nrmse_error)
return(df)
}
#Function to make figure legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#Function to plot results
plot_results<-function(title, yaxis_text, xaxis_text, legend_true, df, results,max_error, min_error){
#Plot results
p1<-ggplot(data=df, aes_(x= ~percentage_zeros, y=as.name(results), group=~tools, colour=~factor(tools)))+ geom_line() + geom_errorbar(aes_(ymin=as.name(min_error), ymax=as.name(max_error)), width=1)
p1<-p1 + labs(x=xaxis_text, y= yaxis_text, colour="Tools") + scale_x_reverse() +scale_colour_manual(values=cbbPalette) + ggtitle(title)
if (legend_true == FALSE){
p1<-p1 + theme(legend.position = 'none', text = element_text(size=14), plot.title = element_text(size=14) )
}
return(p1)
}
###########################################
#Read in data
figure_5a_data<-read.table("../data/Figure5a.txt")
#Process data for ggplot
ES_figure_5a_data<-process_data(figure_5a_data, "ES")
#Set up colour blind friendly palette
tools<-c("RSEM","Salmon Alignment", "Salmon Quasi", "Salmon SMEM", "Sailfish", "eXpress", "Kallisto")
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
names(cbbPalette)<-tools
#Create ES cell graphs
ES_drop_spear<-plot_results("\nES cells", "","", FALSE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error")
ES_drop_NRMSE<-plot_results("", "","Threshold % Dropouts", FALSE, ES_figure_5a_data, "nrmse_results", "max_nrmse_error", "min_nrmse_error")
#Create figure legends
leg<-g_legend(plot_results("Spearman's Rho", "Spearman's Rho","Threshold Percentage of Dropouts", TRUE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error"))
blue<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure5a.txt")
B_figure_5a_data<-process_data(blue, "B")
B_drop_spear<-plot_results("\nB lymphocytes", "","", FALSE, B_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error")
B_drop_NRMSE<-plot_results("", "","Threshold % Dropouts", FALSE, B_figure_5a_data, "nrmse_results", "max_nrmse_error", "min_nrmse_error")
#Arrange graphs
Figure5a<-ggarrange(ggarrange(ES_drop_spear + ylim(0.6,1),B_drop_spear + ylim(0.6,1), ES_drop_NRMSE + ylim(0,50),B_drop_NRMSE + ylim(0,50), nrow=2, ncol=2), leg,
nrow = 1,
ncol = 2,
widths=c(2,1)
)
rm(list=setdiff(ls(), "Figure5a"))
#######################################################
#Functions
#Function to find point density
get_density <- function(x, y, n = 100) {
dens <- MASS::kde2d(x = x, y = y, n = n)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
#Function to plot graphs
plot_cor_expr_zeros<-function(df, ID, x_lab_text, y_lab_text, title, legend){
#filter by ID
df<-df[df$ID==as.name(ID),]
#find density
df$Density <- get_density(df$expression, df$percent_zeros)
#create graph
p1<-ggplot(data=df, aes(x=expression, y=percent_zeros, colour=Density)) + geom_point() + scale_color_viridis()
p1<-p1 + xlab(x_lab_text) + ylab(y_lab_text) + ggtitle(title) + theme(text = element_text(size=14), plot.title = element_text(size=14))
if (legend==FALSE){
p1<- p1 + theme(legend.position = 0)
}
return(p1)
}
# Function to create legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#########################################################################
Figure_5b_data<-read.table("../data/Figure5b.txt")
leg_cor<-g_legend(plot_cor_expr_zeros(Figure_5b_data, "simulated_ES", " ", "% zeros", "Simulated ES cells", TRUE))
ES_sim_cor_expr_zeros<-plot_cor_expr_zeros(Figure_5b_data, "simulated_ES"," ", " ", "\nSimulated ES cells", FALSE)
ES_real_cor_expr_zeros<-plot_cor_expr_zeros(Figure_5b_data, "real_ES", "log2(counts + 1)", " ", "\nReal ES cells", FALSE)
blue<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure5b.txt")
B_sim_cor_expr_zeros<-plot_cor_expr_zeros(blue, "simulated_B"," ", " ", "\nSimulated B lymphocytes", FALSE)
B_real_cor_expr_zeros<-plot_cor_expr_zeros(blue, "real_B", "log2(counts + 1)", " ", "\nReal B lymphocytes", FALSE)
Figure5b<-ggarrange(ggarrange(ES_sim_cor_expr_zeros, B_sim_cor_expr_zeros, ES_real_cor_expr_zeros, B_real_cor_expr_zeros, ncol=2, nrow=2), leg_cor, ncol = 2, widths=c(2,1))
ggarrange(Figure5a, Figure5b, ncol=1, nrow=2)
ggsave("../pdfs/Figure5.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/Figure5.png", last_plot(), height= 225, width=170, units=c("mm"))
rm(list=ls())
library(ggplot2)
library(ggpubr)
library(reshape2)
##############################
# FUNCTIONS
get_percentage_hist<-function(df){
no_zeros<-df#[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
ggplot(data = two_iso_percentage, aes(x=`percentage(value)`)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
#####################################
# MAKE FIGURE 6A
barplot_data<-read.table("../data/Figure6_number_of_isoforms.txt")
ES_barplot_data<-barplot_data[barplot_data$ID=="ES",]
B_barplot_data<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure6_number_of_isoforms.txt")
B_barplot_data<-barplot_data[barplot_data$ID=="B_1",]
ES_0_1_2_barplot<-ggplot(data=ES_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("ES cells")
B_0_1_2_barplot<-ggplot(data=B_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("B lymphocytes")
##############################################################
#MAKE FIGURE 6B
exprs_percent_data<-read.table("../data/Figure_6_percent_exprs.txt")
colnames(exprs_percent_data)[2]<-"expression"
colnames(exprs_percent_data)[3]<-"percentage"
ES_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="ES",]
ES_percent_hist<-ggplot(data=ES_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_exprs_percent_data<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure_6_percent_exprs.txt")
colnames(B_exprs_percent_data)[2]<-"expression"
colnames(B_exprs_percent_data)[3]<-"percentage"
B_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="B_1",]
ES_percent_hist<-ggplot(data=ES_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_percent_hist<-ggplot(data=B_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
#################################################################
#MAKE FIGURE 6C
ES_exprs_percent_plot<-ggplot(data = ES_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_exprs_percent_plot<-ggplot(data = B_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
ggarrange(ES_0_1_2_barplot, B_0_1_2_barplot, ES_percent_hist, B_percent_hist, ES_exprs_percent_plot, B_exprs_percent_plot, ncol =2, nrow=3, labels=c("A", "B", "C"))
ggsave("../pdfs/Figure6.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/Figure6.png", plot=last_plot(), height= 225, width=170, units=c("mm"))
B_barplot_data<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure6_number_of_isoforms.txt")
head(B_barplot_data)
rm(list=ls())
library(ggplot2)
library(ggpubr)
library(reshape2)
##############################
# FUNCTIONS
get_percentage_hist<-function(df){
no_zeros<-df#[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
ggplot(data = two_iso_percentage, aes(x=`percentage(value)`)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
#####################################
# MAKE FIGURE 6A
barplot_data<-read.table("../data/Figure6_number_of_isoforms.txt")
ES_barplot_data<-barplot_data[barplot_data$ID=="ES",]
B_barplot_data<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure6_number_of_isoforms.txt")
B_barplot_data<-B_barplot_data[B_barplot_data$ID=="B_1",]
ES_0_1_2_barplot<-ggplot(data=ES_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("ES cells")
B_0_1_2_barplot<-ggplot(data=B_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("B lymphocytes")
##############################################################
#MAKE FIGURE 6B
exprs_percent_data<-read.table("../data/Figure_6_percent_exprs.txt")
colnames(exprs_percent_data)[2]<-"expression"
colnames(exprs_percent_data)[3]<-"percentage"
ES_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="ES",]
ES_percent_hist<-ggplot(data=ES_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_exprs_percent_data<-read.table("../../../../BLUEPRINT/Benchmarking_pipeline/figures/data/Figure_6_percent_exprs.txt")
colnames(B_exprs_percent_data)[2]<-"expression"
colnames(B_exprs_percent_data)[3]<-"percentage"
B_exprs_percent_data<-B_exprs_percent_data[B_exprs_percent_data$ID=="B_1",]
ES_percent_hist<-ggplot(data=ES_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_percent_hist<-ggplot(data=B_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
#################################################################
#MAKE FIGURE 6C
ES_exprs_percent_plot<-ggplot(data = ES_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_exprs_percent_plot<-ggplot(data = B_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
ggarrange(ES_0_1_2_barplot, B_0_1_2_barplot, ES_percent_hist, B_percent_hist, ES_exprs_percent_plot, B_exprs_percent_plot, ncol =2, nrow=3, labels=c("A", "B", "C"))
ggsave("../pdfs/Figure6.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/Figure6.png", plot=last_plot(), height= 225, width=170, units=c("mm"))
