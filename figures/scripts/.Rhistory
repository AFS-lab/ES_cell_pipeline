results<-data.frame(statistic=do.call(rbind,results), tool=name)
return(results)
}
#Function that returns recall
make_recall<-function(ground_truth, tool_estimates, threshold_unexpr){
TP<-length(ground_truth[ground_truth>threshold_unexpr & tool_estimates>threshold_unexpr])
#print(TP)
FN<-length(ground_truth[ground_truth>threshold_unexpr & tool_estimates<=threshold_unexpr])
return(TP/(TP+FN))
}
#Function that returns recall per cell
return_recall_per_cell<-function(truth_input_data, estimate_input_data,name){
results<-list()
for (i in 1:length(colnames(estimate_input_data))){
results[i]<-make_recall(truth_input_data[,4], estimate_input_data[,i], 0)
}
results<-data.frame(statistic=do.call(rbind,results), tool=name)
return(results)
}
#Function for making graphs of results
plot_data<-function( df, title, ylabel, xlabel) {
df$tool <- as.character(df$tool)
df$tool <- factor(df$tool, levels=unique(df$tool))
spearmans<-ggplot(data=df, aes(x=tool, y=statistic)) + geom_jitter(alpha=0.5, position=position_jitter(width = .2), aes(colour=tool))  + stat_summary(fun.y=mean, geom="point", shape=95, size = 20, colour="black")
spearmans<- spearmans #+ scale_x_discrete(labels=c("RSEM", "Salmon Alignment", "Salmon Quasi", "Salmon SMEM", "Sailfish", "eXpress", "Kallisto"))
spearmans<-spearmans + theme(axis.text.x=element_text( angle=30,vjust=.8, hjust=0.8), legend.position = 'none', text = element_text(size=14)) + scale_colour_manual(values=cbbPalette) + ylab(ylabel) + ggtitle(title) + xlab(xlabel)
return(spearmans)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
##############################################################################
#TODO
#Read in data
filenames <- list.files('reviewer_1_files', pattern="*.txt", full.names=TRUE)
#create objects for files
for (i in 1:length(filenames)){
program<-strsplit(filenames[i], "/")[[1]][2]
program<-strsplit(program,"clean_")[[1]][2]
program<-strsplit(program,"_TPM.txt")[[1]][1]
print(program)
data_processing(filenames[i], program)
}
for (i in 1:length(filenames)){
#get program name, bulk data, and initialised precision and recall dfs
program<-strsplit(filenames[i], "/")[[1]][2]
program<-strsplit(program,"clean_")[[1]][2]
program<-strsplit(program,"_TPM.txt")[[1]][1]
bulk<-get(paste(program,'_bulk', sep=''))
precision<-data.frame()
recall<-data.frame()
for (j in 1:length(filenames)){
#get single cell program name and single cell data
sc_program<-strsplit(filenames[j], "/")[[1]][2]
sc_program<-strsplit(sc_program,"clean_")[[1]][2]
sc_program<-strsplit(sc_program,"_TPM.txt")[[1]][1]
single_cell<-get(paste(sc_program,'_single_cell', sep=''))
#find precision and recall and save in df
precision<-rbind(precision,return_precision_per_cell(bulk, single_cell,sc_program))
recall<-rbind(recall, return_recall_per_cell(bulk, single_cell, sc_program))
}
assign(paste(program,'_as_gt_precision', sep=''), precision)
assign(paste(program,'_as_gt_recall', sep=''), recall)
}
#Make plots
for (i in 1:length(filenames)){
program<-strsplit(filenames[i], "/")[[1]][2]
program<-strsplit(program,"clean_")[[1]][2]
program<-strsplit(program,"_TPM.txt")[[1]][1]
title=paste(program, 'as ground truth', 'precision', sep=' ')
p1<-plot_data(get(paste(program, 'as_gt_precision', sep='_')), title, 'precision', 'tool')
assign(paste(program,'precision', sep='_'), p1)
p2<-plot_data(get(paste(program, 'as_gt_recall', sep='_')), title=paste(program, 'as ground truth', 'recall', sep=' '), 'recall', 'tool')
assign(paste(program,'recall', sep='_'), p2)
}
png('bulk_as_gt_precision_reviewer_1.png')
ggarrange(Kallisto_precision, Sailfish_precision, eXpress_precision, RSEM_precision, Salmon_align_precision, Salmon_quasi_precision, Salmon_SMEM_precision, ncol =2, nrow=4)
dev.off()
png('bulk_as_gt_recall_reviewer_1.png')
ggarrange(Kallisto_recall, Sailfish_recall, eXpress_recall, RSEM_recall, Salmon_align_recall, Salmon_quasi_recall, Salmon_SMEM_recall, ncol=2, nrow=4)
dev.off()
?png
png('bulk_as_gt_precision_reviewer_1.png', width=480*2, height=480*2)
ggarrange(Kallisto_precision, Sailfish_precision, eXpress_precision, RSEM_precision, Salmon_align_precision, Salmon_quasi_precision, Salmon_SMEM_precision, ncol =2, nrow=4)
dev.off()
rm(list=ls())
library(ggplot2)
library(ggpubr)
#FUNCTIONS
#Function which loads data, subsets it and orders it
data_processing<-function(path,name){
#read in and order data
results<-read.table(path)
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
#sort out bulk
bulk<-results[,grepl(pattern = 'bulk', x = colnames(results))]
bulk<-data.frame(bulk, rowmean_bulk=rowMeans(bulk))
#sort out single cell
single_cell<-results[,grepl(pattern = 'MaleB', x = colnames(results))]
#create env variables
assign(paste(name,'_bulk',sep=''), bulk, envir=.GlobalEnv)
assign(paste(name,'_single_cell',sep=''), single_cell, envir=.GlobalEnv)
}
#Function that returns precision
make_precision<-function(ground_truth, tool_estimates, threshold_unexpr){
TP<-length(ground_truth[ground_truth>threshold_unexpr & tool_estimates>threshold_unexpr])
#print(TP)
FP<-length(ground_truth[ground_truth<=threshold_unexpr & tool_estimates>threshold_unexpr])
return(TP/(TP+FP))
}
#Function that returns precision value per cell
return_precision_per_cell<-function(truth_input_data, estimate_input_data,name){
results<-list()
for (i in 1:length(colnames(estimate_input_data))){
results[i]<-make_precision(truth_input_data[,4], estimate_input_data[,i], 0)
}
results<-data.frame(statistic=do.call(rbind,results), tool=name)
return(results)
}
#Function that returns recall
make_recall<-function(ground_truth, tool_estimates, threshold_unexpr){
TP<-length(ground_truth[ground_truth>threshold_unexpr & tool_estimates>threshold_unexpr])
#print(TP)
FN<-length(ground_truth[ground_truth>threshold_unexpr & tool_estimates<=threshold_unexpr])
return(TP/(TP+FN))
}
#Function that returns recall per cell
return_recall_per_cell<-function(truth_input_data, estimate_input_data,name){
results<-list()
for (i in 1:length(colnames(estimate_input_data))){
results[i]<-make_recall(truth_input_data[,4], estimate_input_data[,i], 0)
}
results<-data.frame(statistic=do.call(rbind,results), tool=name)
return(results)
}
#Function for making graphs of results
plot_data<-function( df, title, ylabel, xlabel) {
df$tool <- as.character(df$tool)
df$tool <- factor(df$tool, levels=unique(df$tool))
spearmans<-ggplot(data=df, aes(x=tool, y=statistic)) + geom_jitter(alpha=0.5, position=position_jitter(width = .2), aes(colour=tool))  + stat_summary(fun.y=mean, geom="point", shape=95, size = 20, colour="black")
spearmans<- spearmans #+ scale_x_discrete(labels=c("RSEM", "Salmon Alignment", "Salmon Quasi", "Salmon SMEM", "Sailfish", "eXpress", "Kallisto"))
spearmans<-spearmans + theme(axis.text.x=element_text( angle=30,vjust=.8, hjust=0.8), legend.position = 'none', text = element_text(size=14)) + scale_colour_manual(values=cbbPalette) + ylab(ylabel) + ggtitle(title) + xlab(xlabel)
return(spearmans)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
##############################################################################
#TODO
#Read in data
filenames <- list.files('reviewer_1_files', pattern="*.txt", full.names=TRUE)
#create objects for files
for (i in 1:length(filenames)){
program<-strsplit(filenames[i], "/")[[1]][2]
program<-strsplit(program,"clean_")[[1]][2]
program<-strsplit(program,"_TPM.txt")[[1]][1]
print(program)
data_processing(filenames[i], program)
}
for (i in 1:length(filenames)){
#get program name, bulk data, and initialised precision and recall dfs
program<-strsplit(filenames[i], "/")[[1]][2]
program<-strsplit(program,"clean_")[[1]][2]
program<-strsplit(program,"_TPM.txt")[[1]][1]
bulk<-get(paste(program,'_bulk', sep=''))
precision<-data.frame()
recall<-data.frame()
for (j in 1:length(filenames)){
#get single cell program name and single cell data
sc_program<-strsplit(filenames[j], "/")[[1]][2]
sc_program<-strsplit(sc_program,"clean_")[[1]][2]
sc_program<-strsplit(sc_program,"_TPM.txt")[[1]][1]
single_cell<-get(paste(sc_program,'_single_cell', sep=''))
#find precision and recall and save in df
precision<-rbind(precision,return_precision_per_cell(bulk, single_cell,sc_program))
recall<-rbind(recall, return_recall_per_cell(bulk, single_cell, sc_program))
}
assign(paste(program,'_as_gt_precision', sep=''), precision)
assign(paste(program,'_as_gt_recall', sep=''), recall)
}
#Make plots
for (i in 1:length(filenames)){
program<-strsplit(filenames[i], "/")[[1]][2]
program<-strsplit(program,"clean_")[[1]][2]
program<-strsplit(program,"_TPM.txt")[[1]][1]
title=paste(program, 'as ground truth', 'precision', sep=' ')
p1<-plot_data(get(paste(program, 'as_gt_precision', sep='_')), title, 'precision', 'tool')
assign(paste(program,'precision', sep='_'), p1)
p2<-plot_data(get(paste(program, 'as_gt_recall', sep='_')), title=paste(program, 'as ground truth', 'recall', sep=' '), 'recall', 'tool')
assign(paste(program,'recall', sep='_'), p2)
}
png('bulk_as_gt_precision_reviewer_1.png', width=480*2, height=480*2)
ggarrange(Kallisto_precision, Sailfish_precision, eXpress_precision, RSEM_precision, Salmon_align_precision, Salmon_quasi_precision, Salmon_SMEM_precision, ncol =2, nrow=4)
dev.off()
png('bulk_as_gt_recall_reviewer_1.png', width=480*2, height=480*2)
ggarrange(Kallisto_recall, Sailfish_recall, eXpress_recall, RSEM_recall, Salmon_align_recall, Salmon_quasi_recall, Salmon_SMEM_recall, ncol=2, nrow=4)
dev.off()
setwd('Pipelines/Kolod/Benchmarking_pipeline/figures/scripts/')
library(ggplot2)
library(ggpubr)
library(reshape2)
library(hydroGOF)
library(scater)
####################################
# FUNCTIONS
#Function for making graphs of results
plot_data<-function( df, title, ylabel, xlabel) {
df$Var1 <- as.character(df$Var1)
df$Var1 <- factor(df$Var1, levels=unique(df$Var1))
spearmans<-ggplot(data=df, aes(x=Var1, y=value)) + geom_jitter(alpha=0.5, position=position_jitter(width = .2), aes(colour=Var1))  + stat_summary(fun.y=mean, geom="point", shape=95, size = 20, colour="black")
spearmans<- spearmans + scale_x_discrete(labels=c("RSEM", "Salmon Alignment", "Salmon Quasi", "Salmon SMEM", "Sailfish", "eXpress", "Kallisto"))
spearmans<-spearmans + theme(axis.text.x=element_text( angle=30,vjust=.8, hjust=0.8), legend.position = 'none', text = element_text(size=14)) + scale_colour_manual(values=cbbPalette) + ylab(ylabel) + ggtitle(title) + xlab(xlabel)
return(spearmans)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
##############################################
# MAKE FIGURE 2
#Read in performance statistics
ggplot_results<-read.table("../data/Figure2.txt")
#Split ggplot_results by statistic
spearmans<-ggplot_results[ggplot_results$statistic=="spearmans",]
nrmse<-ggplot_results[ggplot_results$statistic=="nrmse",]
precision<-ggplot_results[ggplot_results$statistic=="precision",]
recall<-ggplot_results[ggplot_results$statistic=="recall",]
F1<-ggplot_results[ggplot_results$statistic=="F1",]
#make graphs
spearmans_graph<-plot_data(spearmans, "Spearman's Rho", "Spearman's Rho", "")
nrmse_graph<-plot_data(nrmse, "NRMSE", "NRMSE", "")
precision_graph<-plot_data(precision,"Precision", "Precision", "")
recall_graph<-plot_data(recall, "Recall", "Recall", "")
F1_graph<-plot_data(F1, "F1", "F1", "")
ggarrange(F1_graph, ggarrange(precision_graph, recall_graph, nrow=2), spearmans_graph,nrmse_graph,
nrow = 2,
ncol = 2,
labels = c("A","","B", "C")
)
ggsave("../pdfs/Figure2.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/Figure2.png", plot=last_plot(), height= 225, width=170, units=c("mm"))
rm(list=ls())
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
library(gtable)
library(ggpubr)
library(reshape2)
library(tidyverse)
library(MASS)
library(viridis)
####################################
# FUNCTIONS
#Function to process data
process_data<-function(df,cell_type){
df<-df[df$cell_type==as.name(cell_type),]
df<-cbind(df, max_spearmans_error = df$spearmans_results + df$spearmans_error, min_spearmans_error = df$spearmans_results - df$spearmans_error)
df<-cbind(df, max_nrmse_error = df$nrmse_results + df$nrmse_error, min_nrmse_error = df$nrmse_results - df$nrmse_error)
return(df)
}
#Function to make figure legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#Function to plot results
plot_results<-function(title, yaxis_text, xaxis_text, legend_true, df, results,max_error, min_error){
#Plot results
p1<-ggplot(data=df, aes_(x= ~percentage_zeros, y=as.name(results), group=~tools, colour=~factor(tools)))+ geom_line() + geom_errorbar(aes_(ymin=as.name(min_error), ymax=as.name(max_error)), width=1)
p1<-p1 + labs(x=xaxis_text, y= yaxis_text, colour="Tools") + scale_x_reverse() +scale_colour_manual(values=cbbPalette) + ggtitle(title)
if (legend_true == FALSE){
p1<-p1 + theme(legend.position = 'none', text = element_text(size=14), plot.title = element_text(size=14) )
}
return(p1)
}
###########################################
#Read in data
figure_5a_data<-read.table("../data/Figure5a.txt")
#Process data for ggplot
ES_figure_5a_data<-process_data(figure_5a_data, "ES")
#Set up colour blind friendly palette
tools<-c("RSEM","Salmon Alignment", "Salmon Quasi", "Salmon SMEM", "Sailfish", "eXpress", "Kallisto")
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
names(cbbPalette)<-tools
#Create ES cell graphs
ES_drop_spear<-plot_results("\nES cells", "","", FALSE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error")
ES_drop_NRMSE<-plot_results("", "","Threshold % Dropouts", FALSE, ES_figure_5a_data, "nrmse_results", "max_nrmse_error", "min_nrmse_error")
#Create figure legends
leg<-g_legend(plot_results("Spearman's Rho", "Spearman's Rho","Threshold Percentage of Dropouts", TRUE, ES_figure_5a_data, "spearmans_results", "max_spearmans_error", "min_spearmans_error"))
#Arrange graphs
Figure5a<-ggarrange(ggarrange(ES_drop_spear + ylim(0.6,1), ES_drop_NRMSE + ylim(0,50),nrow=2, ncol=1), leg,
nrow = 1,
ncol = 2
)
rm(list=setdiff(ls(), "Figure5a"))
#######################################################
#Functions
#Function to find point density
get_density <- function(x, y, n = 100) {
dens <- MASS::kde2d(x = x, y = y, n = n)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
#Function to plot graphs
plot_cor_expr_zeros<-function(df, ID, x_lab_text, y_lab_text, title, legend){
#filter by ID
df<-df[df$ID==as.name(ID),]
#find density
df$Density <- get_density(df$expression, df$percent_zeros)
#create graph
p1<-ggplot(data=df, aes(x=expression, y=percent_zeros, colour=Density)) + geom_point() + scale_color_viridis()
p1<-p1 + xlab(x_lab_text) + ylab(y_lab_text) + ggtitle(title) + theme(text = element_text(size=14), plot.title = element_text(size=14))
if (legend==FALSE){
p1<- p1 + theme(legend.position = 0)
}
return(p1)
}
# Function to create legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#########################################################################
Figure_5b_data<-read.table("../data/Figure5b.txt")
leg_cor<-g_legend(plot_cor_expr_zeros(Figure_5b_data, "simulated_ES", " ", "% zeros", "Simulated ES cells", TRUE))
ES_sim_cor_expr_zeros<-plot_cor_expr_zeros(Figure_5b_data, "simulated_ES"," ", " ", "\nSimulated ES cells", FALSE)
ES_real_cor_expr_zeros<-plot_cor_expr_zeros(Figure_5b_data, "real_ES", "log2(counts + 1)", " ", "\nReal ES cells", FALSE)
Figure5b<-ggarrange(ggarrange(ES_sim_cor_expr_zeros, ES_real_cor_expr_zeros, ncol=1, nrow=2), leg_cor, ncol = 2, widths=c(2,1))
ggarrange(Figure5a, Figure5b, ncol=1, nrow=2)
ggsave("../pdfs/Figure5.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/Figure5.png", last_plot(), height= 225, width=170, units=c("mm"))
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater, quietly = TRUE)
library(knitr)
options(stringsAsFactors = FALSE)
############################################################
# READS AND ALIGNMENT QC PLOTS
QC_raw<-read.table("../data/SupplementaryFigure10_reads_alignment_data.txt")
#Alignment based QC plots
Unique<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unique), y=Unique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() +xlab(" ") + ggtitle("\nNumber of Uniquely Mapping Reads")
NonUnique<-ggplot(data=QC_raw, aes(x=reorder(Filename,NonUnique), y=NonUnique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("Number of Non-Uniquely Mapping Reads")
NonUnique<-NonUnique + geom_hline(yintercept=2500000/1000000, color='red', linetype='dashed')
Unmapped<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unmapped), y=Unmapped)) + geom_point(stat="identity") + ylab("Number of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + ylim(0,100) + xlab(" ") + ggtitle("Number of Unmapped Reads")
NumAlign<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumAlignments), y=NumAlignments/1000000)) + geom_point(stat="identity") + ylab("Millions of Alignments") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Alignments")
NumAlign<-NumAlign + geom_hline(yintercept=4000000/1000000, color='red', linetype='dashed')
NumAlign<-NumAlign + geom_hline(yintercept=32000000/1000000, color='red', linetype='dashed')
#Read number based QC plot
NumReads<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumReads), y=NumReads/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_text(size=14)) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Reads")
NumReads<-NumReads + geom_hline(yintercept=3500000/1000000, color='red', linetype='dashed')
NumReads<-NumReads + geom_hline(yintercept=12000000/1000000, color='red', linetype='dashed')
#############################################################
# MT READS QC PLOT
load("../data/SupplementaryFigure10_scater_object.RData")
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
# make final figure
ggarrange(mt_reads, NumReads, NumAlign, Unique, NonUnique, Unmapped, ncol = 2,nrow=3, labels = c("A","B","C","D","E","F"))
ggsave("../pdfs/SupplementaryFigure10.pdf", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
ggsave("../pngs/SupplementaryFigure10.png", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
mt_reads
QC_raw
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater, quietly = TRUE)
library(knitr)
options(stringsAsFactors = FALSE)
############################################################
# READS AND ALIGNMENT QC PLOTS
QC_raw<-read.table("../data/SupplementaryFigure10_reads_alignment_data.txt")
#Alignment based QC plots
Unique<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unique), y=Unique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() +xlab(" ") + ggtitle("\nNumber of Uniquely Mapping Reads")
NonUnique<-ggplot(data=QC_raw, aes(x=reorder(Filename,NonUnique), y=NonUnique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("Number of Non-Uniquely Mapping Reads")
NonUnique<-NonUnique + geom_hline(yintercept=2500000/1000000, color='red', linetype='dashed')
Unmapped<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unmapped), y=Unmapped)) + geom_point(stat="identity") + ylab("Number of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + ylim(0,100) + xlab(" ") + ggtitle("Number of Unmapped Reads")
NumAlign<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumAlignments), y=NumAlignments/1000000)) + geom_point(stat="identity") + ylab("Millions of Alignments") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Alignments")
NumAlign<-NumAlign + geom_hline(yintercept=4000000/1000000, color='red', linetype='dashed')
NumAlign<-NumAlign + geom_hline(yintercept=32000000/1000000, color='red', linetype='dashed')
#Read number based QC plot
NumReads<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumReads), y=NumReads/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_text(size=14)) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Reads")
NumReads<-NumReads + geom_hline(yintercept=3500000/1000000, color='red', linetype='dashed')
NumReads<-NumReads + geom_hline(yintercept=12000000/1000000, color='red', linetype='dashed')
#############################################################
# MT READS QC PLOT
load("../data/SupplementaryFigure10_scater_object.RData")
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
# make final figure
ggarrange(mt_reads, NumReads, NumAlign, Unique, NonUnique, Unmapped, ncol = 2,nrow=3, labels = c("A","B","C","D","E","F"))
ggsave("../pdfs/SupplementaryFigure10.pdf", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
ggsave("../pngs/SupplementaryFigure10.png", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater, quietly = TRUE)
library(knitr)
options(stringsAsFactors = FALSE)
############################################################
# READS AND ALIGNMENT QC PLOTS
QC_raw<-read.table("../data/SupplementaryFigure11_reads_alignment_data.txt")
#Alignment based QC plots
Unique<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unique), y=Unique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() +xlab(" ") + ggtitle("\nNumber of Uniquely Mapping Reads")
Unique<-Unique + geom_hline(yintercept=5000000/1000000, color='red', linetype='dashed')
NonUnique<-ggplot(data=QC_raw, aes(x=reorder(Filename,NonUnique), y=NonUnique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("Number of Non-Uniquely Mapping Reads")
#NonUnique<-NonUnique + geom_hline(yintercept=2000000/1000000, color='red', linetype='dashed')
Unmapped<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unmapped), y=Unmapped)) + geom_point(stat="identity") + ylab("Number of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + ylim(0,100) + xlab(" ") + ggtitle("Number of Unmapped Reads")
NumAlign<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumAlignments), y=NumAlignments/1000000)) + geom_point(stat="identity") + ylab("Millions of Alignments") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Alignments")
#Read number based QC plot
NumReads<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumReads), y=NumReads/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_text(size=14)) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Reads")
#############################################################
# MT READS QC PLOT
load("../data/SupplementaryFigure11_scater_object.RData")
mt_reads<-scater::plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_feature_controls_MT",
colour = "batch")
)
# make final figure
ggarrange(mt_reads, NumReads, NumAlign, Unique, NonUnique, Unmapped, ncol = 2,nrow=3, labels = c("A","B","C","D","E","F"))
ggsave("../pdfs/SupplementaryFigure11.pdf", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
ggsave("../pngs/SupplementaryFigure11.png", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_feature_controls_MT",
colour = "batch")
)
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater, quietly = TRUE)
library(knitr)
options(stringsAsFactors = FALSE)
############################################################
# READS AND ALIGNMENT QC PLOTS
QC_raw<-read.table("../data/SupplementaryFigure11_reads_alignment_data.txt")
#Alignment based QC plots
Unique<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unique), y=Unique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() +xlab(" ") + ggtitle("\nNumber of Uniquely Mapping Reads")
Unique<-Unique + geom_hline(yintercept=5000000/1000000, color='red', linetype='dashed')
NonUnique<-ggplot(data=QC_raw, aes(x=reorder(Filename,NonUnique), y=NonUnique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("Number of Non-Uniquely Mapping Reads")
#NonUnique<-NonUnique + geom_hline(yintercept=2000000/1000000, color='red', linetype='dashed')
Unmapped<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unmapped), y=Unmapped)) + geom_point(stat="identity") + ylab("Number of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + ylim(0,100) + xlab(" ") + ggtitle("Number of Unmapped Reads")
NumAlign<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumAlignments), y=NumAlignments/1000000)) + geom_point(stat="identity") + ylab("Millions of Alignments") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Alignments")
#Read number based QC plot
NumReads<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumReads), y=NumReads/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_text(size=14)) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Reads")
#############################################################
# MT READS QC PLOT
load("../data/SupplementaryFigure11_scater_object.RData")
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
# make final figure
ggarrange(mt_reads, NumReads, NumAlign, Unique, NonUnique, Unmapped, ncol = 2,nrow=3, labels = c("A","B","C","D","E","F"))
ggsave("../pdfs/SupplementaryFigure11.pdf", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
ggsave("../pngs/SupplementaryFigure11.png", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
rm(list=ls())
#QC script
library(ggplot2)
library(ggpubr)
library(scater, quietly = TRUE)
library(knitr)
options(stringsAsFactors = FALSE)
############################################################
# READS AND ALIGNMENT QC PLOTS
QC_raw<-read.table("../data/SupplementaryFigure11_reads_alignment_data.txt")
#Alignment based QC plots
Unique<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unique), y=Unique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() +xlab(" ") + ggtitle("\nNumber of Uniquely Mapping Reads")
Unique<-Unique + geom_hline(yintercept=5000000/1000000, color='red', linetype='dashed')
NonUnique<-ggplot(data=QC_raw, aes(x=reorder(Filename,NonUnique), y=NonUnique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("Number of Non-Uniquely Mapping Reads")
#NonUnique<-NonUnique + geom_hline(yintercept=2000000/1000000, color='red', linetype='dashed')
Unmapped<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unmapped), y=Unmapped)) + geom_point(stat="identity") + ylab("Number of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + ylim(0,100) + xlab(" ") + ggtitle("Number of Unmapped Reads")
NumAlign<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumAlignments), y=NumAlignments/1000000)) + geom_point(stat="identity") + ylab("Millions of Alignments") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Alignments")
#Read number based QC plot
NumReads<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumReads), y=NumReads/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_text(size=14)) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Reads")
#############################################################
# MT READS QC PLOT
load("../data/SupplementaryFigure11_scater_object.RData")
mt_reads<-plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_MT",
colour = "batch")
)
# make final figure
ggarrange(mt_reads, NumReads, NumAlign, Unique, NonUnique, Unmapped, ncol = 2,nrow=3, labels = c("A","B","C","D","E","F"))
ggsave("../pdfs/SupplementaryFigure11.pdf", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
ggsave("../pngs/SupplementaryFigure11.png", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
